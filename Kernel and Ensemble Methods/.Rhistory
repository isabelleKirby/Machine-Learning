plot(svm_poly, full_stats_test, TotalKill ~ TotalDeath)
plot(svm_poly, full_stats_test, TotalKill ~ TotalVision)
plot(svm_poly, full_stats_test, TotalKill ~ TotalCrowdControl)
plot(svm_poly, full_stats_test, TotalKill ~ TotalDamage)
set.seed(1010)
tune_out <- tune(svm, won~., data=full_stats_validate, kernel="poly",
ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune_out)
best_poly_model <- tune_out$best.model
summary(best_poly_model)
best_poly_pred <- predict(best_poly_model, newdata=full_stats_test)
acc_best_poly <- mean(best_poly_pred==full_stats_test$won)
confusionMatrix(best_poly_pred, reference = full_stats_test$won)
plot(best_poly_model, full_stats_test, TotalGold ~ TotalVision)
plot(best_poly_model, full_stats_test, TotalGold ~ TotalDeath)
plot(best_poly_model, full_stats_test, TotalKill ~ TotalDeath)
plot(best_poly_model, full_stats_test, TotalKill ~ TotalVision)
plot(best_poly_model, full_stats_test, TotalKill ~ TotalCrowdControl)
plot(best_poly_model, full_stats_test, TotalKill ~ TotalDamage)
library(e1071)
svm_rad <- svm(won~., data=full_stats_train, kernel="radial", cost=10, scale=TRUE)
summary(svm_rad)
library(caret)
svm_probs_rad <- predict(svm_rad, newdata = full_stats_test)
confusionMatrix(svm_probs_rad, reference = full_stats_test$won)
plot(svm_rad, full_stats_test, TotalGold ~ TotalVision)
plot(svm_rad, full_stats_test, TotalGold ~ TotalDeath)
plot(svm_rad, full_stats_test, TotalKill ~ TotalDeath)
plot(svm_rad, full_stats_test, TotalKill ~ TotalVision)
plot(svm_rad, full_stats_test, TotalKill ~ TotalCrowdControl)
plot(svm_rad, full_stats_test, TotalKill ~ TotalDamage)
set.seed(1010)
tune_out <- tune(svm, won~., data=full_stats_validate, kernel="radial",
ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune_out)
best_rad_model <- tune_out$best.model
summary(best_rad_model)
best_rad_pred <- predict(best_rad_model, newdata=full_stats_test)
acc_best_rad <- mean(best_rad_pred==full_stats_test$won)
confusionMatrix(best_rad_pred, reference = full_stats_test$won)
plot(best_rad_model, full_stats_test, TotalGold ~ TotalVision)
plot(best_rad_model, full_stats_test, TotalGold ~ TotalDeath)
plot(best_rad_model, full_stats_test, TotalKill ~ TotalDeath)
plot(best_rad_model, full_stats_test, TotalKill ~ TotalVision)
plot(best_rad_model, full_stats_test, TotalKill ~ TotalCrowdControl)
plot(best_rad_model, full_stats_test, TotalKill ~ TotalDamage)
win_stats_df <- read.csv((unz("League_Data/league_korea_high_elo_team_stats.zip", "win_team_stats.csv")))
lose_stats_df <- read.csv((unz("League_Data/league_korea_high_elo_team_stats.zip", "lose_team_stats.csv")))
str(win_stats_df)
str(lose_stats_df)
# Replacing column names for rbind
colnames(win_stats_df) <- c('kill1', 'kill2', 'kill3', 'kill4', 'kill5', 'death1', 'death2', 'death3', 'death4', 'death5', 'totalDamageDealtToChampions1', 'totalDamageDealtToChampions2', 'totalDamageDealtToChampions3', 'totalDamageDealtToChampions4', 'totalDamageDealtToChampions5', 'goldEarned1', 'goldEarned2', 'goldEarned3', 'goldEarned4', 'goldEarned5', 'visionScore1', 'visionScore2', 'visionScore3', 'visionScore4', 'visionScore5', 'totalTimeCrowdControlDealt1', 'totalTimeCrowdControlDealt2', 'totalTimeCrowdControlDealt3', 'totalTimeCrowdControlDealt4', 'totalTimeCrowdControlDealt5', 'gameId')
colnames(lose_stats_df) <- c('kill1', 'kill2', 'kill3', 'kill4', 'kill5', 'death1', 'death2', 'death3', 'death4', 'death5', 'totalDamageDealtToChampions1', 'totalDamageDealtToChampions2', 'totalDamageDealtToChampions3', 'totalDamageDealtToChampions4', 'totalDamageDealtToChampions5', 'goldEarned1', 'goldEarned2', 'goldEarned3', 'goldEarned4', 'goldEarned5', 'visionScore1', 'visionScore2', 'visionScore3', 'visionScore4', 'visionScore5', 'totalTimeCrowdControlDealt1', 'totalTimeCrowdControlDealt2', 'totalTimeCrowdControlDealt3', 'totalTimeCrowdControlDealt4', 'totalTimeCrowdControlDealt5', 'gameId')
# Adding column based on dataset it is in
library(dplyr)
win_stats_df <- win_stats_df %>%
mutate(won="True")
lose_stats_df <- lose_stats_df %>%
mutate(won ="False")
#full_stats_df <- merge(win_stats_df, lose_stats_df, by = "gameId")
full_stats_df <- rbind(win_stats_df, lose_stats_df)
drop <- c("gameId")
full_stats_df <- full_stats_df[,!(names(full_stats_df) %in% drop)]
# Make our won column a factor for classification
full_stats_df$won <- as.factor(full_stats_df$won)
str(full_stats_df)
i <- sample(1:nrow(full_stats_df), .2*nrow(full_stats_df), replace=FALSE)
full_stats_smol <- full_stats_df[i,]
lolDataless <- full_stats_smol %>% rowwise() %>% mutate(TotalKill = sum(c_across(kill1:kill5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalDeath = sum(c_across(death1:death5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalDamage = sum(c_across(totalDamageDealtToChampions1:totalDamageDealtToChampions5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalGold = sum(c_across(goldEarned1:goldEarned5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalVision = sum(c_across(visionScore1:visionScore5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalCrowdControl = sum(c_across(totalTimeCrowdControlDealt1:totalTimeCrowdControlDealt5)))
drop <- c('kill1', 'kill2', 'kill3', 'kill4', 'kill5', 'death1', 'death2', 'death3', 'death4', 'death5', 'totalDamageDealtToChampions1', 'totalDamageDealtToChampions2', 'totalDamageDealtToChampions3', 'totalDamageDealtToChampions4', 'totalDamageDealtToChampions5', 'goldEarned1', 'goldEarned2', 'goldEarned3', 'goldEarned4', 'goldEarned5', 'visionScore1', 'visionScore2', 'visionScore3', 'visionScore4', 'visionScore5', 'totalTimeCrowdControlDealt1', 'totalTimeCrowdControlDealt2', 'totalTimeCrowdControlDealt3', 'totalTimeCrowdControlDealt4', 'totalTimeCrowdControlDealt5')
lolDataless = lolDataless[, !(names(lolDataless) %in% drop)]
summary(lolDataless)
set.seed(1010)
i <- sample(1:nrow(lolDataless), 0.75*nrow(lolDataless), replace=FALSE)
full_stats_train <- lolDataless[i,]
full_stats_test <- lolDataless[-i,]
summary(full_stats_train)
boxplot(full_stats_train$won, full_stats_train$TotalDeath, main="Won and Deaths", xlab="Won", ylab="Total Deaths", outline = FALSE, col = 'aquamarine')
boxplot(full_stats_train$won, full_stats_train$TotalKill, main="Won and kills", xlab="Won", ylab="Total kills", outline = FALSE, col = 'azure')
boxplot(full_stats_train$won, full_stats_train$TotalGold, main="Won and Gold Earned", xlab="Won", ylab="Total Gold Earned", outline = FALSE, col = 'beige')
boxplot(full_stats_train$won, full_stats_train$TotalVision, main="Won and Vision Score", xlab="Won", ylab="Total Vision Score", outline = FALSE, col = 'bisque')
boxplot(full_stats_train$won, full_stats_train$TotalCrowdControl, main="Won and totalTimeCrowdControlDealt", xlab="Won", ylab="Total totalTimeCrowdControlDealt", outline = FALSE, col='red')
plot(full_stats_train$TotalKill, full_stats_train$TotalGold, main="Kills and Gold Earned", xlab="Kills", ylab="Total Gold Earned", col = rep(1:6))
plot(full_stats_train$TotalDeath, full_stats_train$TotalDeath, main="Deaths and Gold Earned", xlab="Deaths", ylab="Total Gold Earned", col = rep(6:12))
plot(full_stats_train$TotalVision, full_stats_train$TotalGold, main="Vision Score and Gold Earned", xlab="Vision Score", ylab="Total Gold Earned", col = rep(12:18))
plot(full_stats_train$TotalCrowdControl, full_stats_train$TotalGold, main="totalTimeCrowdControlDealt and Gold Earned", xlab="totalTimeCrowdControlDealt", ylab="Total Gold Earned", col = rep(18:24))
glm_won <- glm(won~., data=full_stats_train, family = "binomial")
summary(glm_won)
library(caret)
glm_probs <- predict(glm_won, newdata = full_stats_test, type = "response")
glm_pred <- ifelse(glm_probs > 0.5, 1, 0)
glm_acc <- mean(glm_pred == full_stats_test$won)
confusionMatrix(as.factor(glm_pred), reference = as.factor(full_stats_test$won))
library(caret)
glm_probs <- predict(glm_won, newdata = full_stats_test, type = "response")
glm_pred <- ifelse(glm_probs > 0.5, 1, 0)
glm_acc <- mean(glm_pred == full_stats_test$won)
confusionMatrix(as.factor(glm_pred), reference = as.factor(full_stats_test$won))
library(caret)
glm_won <- glm(won~., data=full_stats_train, family = "binomial")
summary(glm_won)
glm_probs <- predict(glm_won, newdata = full_stats_test)
str(glm_probs)
glm_pred <- ifelse(glm_probs > 0.5, "True", "False")
glm_acc <- mean(glm_pred == full_stats_test$won)
confusionMatrix(as.factor(glm_pred), reference = full_stats_test$won)
library(randomForest)
set.seed(1010)
randFor <- randomForest(won~., data=full_stats_train, importance=TRUE)
#summary(randFor)
library(randomForest)
set.seed(1010)
randFor <- randomForest(won~., data=full_stats_train, importance=TRUE)
summary(randFor)
View(full_stats_train)
View(full_stats_train)
win_stats_df <- read.csv((unz("League_Data/league_korea_high_elo_team_stats.zip", "win_team_stats.csv")))
lose_stats_df <- read.csv((unz("League_Data/league_korea_high_elo_team_stats.zip", "lose_team_stats.csv")))
str(win_stats_df)
str(lose_stats_df)
# Replacing column names for rbind
colnames(win_stats_df) <- c('kill1', 'kill2', 'kill3', 'kill4', 'kill5', 'death1', 'death2', 'death3', 'death4', 'death5', 'totalDamageDealtToChampions1', 'totalDamageDealtToChampions2', 'totalDamageDealtToChampions3', 'totalDamageDealtToChampions4', 'totalDamageDealtToChampions5', 'goldEarned1', 'goldEarned2', 'goldEarned3', 'goldEarned4', 'goldEarned5', 'visionScore1', 'visionScore2', 'visionScore3', 'visionScore4', 'visionScore5', 'totalTimeCrowdControlDealt1', 'totalTimeCrowdControlDealt2', 'totalTimeCrowdControlDealt3', 'totalTimeCrowdControlDealt4', 'totalTimeCrowdControlDealt5', 'gameId')
colnames(lose_stats_df) <- c('kill1', 'kill2', 'kill3', 'kill4', 'kill5', 'death1', 'death2', 'death3', 'death4', 'death5', 'totalDamageDealtToChampions1', 'totalDamageDealtToChampions2', 'totalDamageDealtToChampions3', 'totalDamageDealtToChampions4', 'totalDamageDealtToChampions5', 'goldEarned1', 'goldEarned2', 'goldEarned3', 'goldEarned4', 'goldEarned5', 'visionScore1', 'visionScore2', 'visionScore3', 'visionScore4', 'visionScore5', 'totalTimeCrowdControlDealt1', 'totalTimeCrowdControlDealt2', 'totalTimeCrowdControlDealt3', 'totalTimeCrowdControlDealt4', 'totalTimeCrowdControlDealt5', 'gameId')
# Adding column based on dataset it is in
library(dplyr)
win_stats_df <- win_stats_df %>%
mutate(won=1)
lose_stats_df <- lose_stats_df %>%
mutate(won =0)
#full_stats_df <- merge(win_stats_df, lose_stats_df, by = "gameId")
full_stats_df <- rbind(win_stats_df, lose_stats_df)
drop <- c("gameId")
full_stats_df <- full_stats_df[,!(names(full_stats_df) %in% drop)]
# Make our won column a factor for classification
full_stats_df$won <- as.factor(full_stats_df$won)
str(full_stats_df)
i <- sample(1:nrow(full_stats_df), .2*nrow(full_stats_df), replace=FALSE)
full_stats_smol <- full_stats_df[i,]
lolDataless <- full_stats_smol %>% rowwise() %>% mutate(TotalKill = sum(c_across(kill1:kill5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalDeath = sum(c_across(death1:death5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalDamage = sum(c_across(totalDamageDealtToChampions1:totalDamageDealtToChampions5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalGold = sum(c_across(goldEarned1:goldEarned5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalVision = sum(c_across(visionScore1:visionScore5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalCrowdControl = sum(c_across(totalTimeCrowdControlDealt1:totalTimeCrowdControlDealt5)))
drop <- c('kill1', 'kill2', 'kill3', 'kill4', 'kill5', 'death1', 'death2', 'death3', 'death4', 'death5', 'totalDamageDealtToChampions1', 'totalDamageDealtToChampions2', 'totalDamageDealtToChampions3', 'totalDamageDealtToChampions4', 'totalDamageDealtToChampions5', 'goldEarned1', 'goldEarned2', 'goldEarned3', 'goldEarned4', 'goldEarned5', 'visionScore1', 'visionScore2', 'visionScore3', 'visionScore4', 'visionScore5', 'totalTimeCrowdControlDealt1', 'totalTimeCrowdControlDealt2', 'totalTimeCrowdControlDealt3', 'totalTimeCrowdControlDealt4', 'totalTimeCrowdControlDealt5')
lolDataless = lolDataless[, !(names(lolDataless) %in% drop)]
summary(lolDataless)
set.seed(1010)
i <- sample(1:nrow(lolDataless), 0.75*nrow(lolDataless), replace=FALSE)
full_stats_train <- lolDataless[i,]
full_stats_test <- lolDataless[-i,]
summary(full_stats_train)
boxplot(full_stats_train$won, full_stats_train$TotalDeath, main="Won and Deaths", xlab="Won", ylab="Total Deaths", outline = FALSE, col = 'aquamarine')
boxplot(full_stats_train$won, full_stats_train$TotalKill, main="Won and kills", xlab="Won", ylab="Total kills", outline = FALSE, col = 'azure')
boxplot(full_stats_train$won, full_stats_train$TotalGold, main="Won and Gold Earned", xlab="Won", ylab="Total Gold Earned", outline = FALSE, col = 'beige')
boxplot(full_stats_train$won, full_stats_train$TotalVision, main="Won and Vision Score", xlab="Won", ylab="Total Vision Score", outline = FALSE, col = 'bisque')
boxplot(full_stats_train$won, full_stats_train$TotalCrowdControl, main="Won and totalTimeCrowdControlDealt", xlab="Won", ylab="Total totalTimeCrowdControlDealt", outline = FALSE, col='red')
plot(full_stats_train$TotalKill, full_stats_train$TotalGold, main="Kills and Gold Earned", xlab="Kills", ylab="Total Gold Earned", col = rep(1:6))
plot(full_stats_train$TotalDeath, full_stats_train$TotalDeath, main="Deaths and Gold Earned", xlab="Deaths", ylab="Total Gold Earned", col = rep(6:12))
plot(full_stats_train$TotalVision, full_stats_train$TotalGold, main="Vision Score and Gold Earned", xlab="Vision Score", ylab="Total Gold Earned", col = rep(12:18))
plot(full_stats_train$TotalCrowdControl, full_stats_train$TotalGold, main="totalTimeCrowdControlDealt and Gold Earned", xlab="totalTimeCrowdControlDealt", ylab="Total Gold Earned", col = rep(18:24))
library(caret)
glm_won <- glm(won~., data=full_stats_train, family = "binomial")
summary(glm_won)
glm_probs <- predict(glm_won, newdata = full_stats_test)
str(glm_probs)
glm_pred <- ifelse(glm_probs > 0.5, "True", "False")
glm_acc <- mean(glm_pred == full_stats_test$won)
confusionMatrix(as.factor(glm_pred), reference = full_stats_test$won)
library(caret)
glm_won <- glm(won~., data=full_stats_train, family = "binomial")
summary(glm_won)
glm_probs <- predict(glm_won, newdata = full_stats_test)
str(glm_probs)
glm_pred <- ifelse(glm_probs > 0.5, "True", "False")
glm_acc <- mean(glm_pred == full_stats_test$won)
confusionMatrix(as.factor(glm_pred), reference = as.factor(full_stats_test$won)
library(caret)
glm_won <- glm(won~., data=full_stats_train, family = "binomial")
summary(glm_won)
glm_probs <- predict(glm_won, newdata = full_stats_test)
str(glm_probs)
glm_pred <- ifelse(glm_probs > 0.5, 1, 0)
glm_acc <- mean(glm_pred == full_stats_test$won)
confusionMatrix(as.factor(glm_pred), reference = as.factor(full_stats_test$won)
library(caret)
glm_won <- glm(won~., data=full_stats_train, family = "binomial")
summary(glm_won)
glm_probs <- predict(glm_won, newdata = full_stats_test, type = "response")
glm_pred <- ifelse(glm_probs > 0.5, 1, 0)
glm_acc <- mean(glm_pred == full_stats_test$won)
confusionMatrix(as.factor(glm_pred), reference = as.factor(full_stats_test$won))
library(randomForest)
set.seed(1010)
randFor <- randomForest(won~., data=full_stats_train, importance=TRUE)
#summary(randFor)
library(randomForest)
set.seed(1010)
randFor <- randomForest(won~., data=full_stats_train, importance=TRUE)
#summary(randFor)
library(randomForest)
set.seed(1010)
randFor <- randomForest(won~., data=full_stats_train, importance=TRUE)
summary(randFor)
library(xgboost)
train_label <- ifelse(full_stats_train$won==1, 1, 0)
train_matrix <- data.matrix((full_stats_train[, -6]))
xgb_model <- xgboost(data=train_matrix, label=train_label, nrounds=10, objective='binary:logistic')
require(xgboost)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
print(train$data[1, 1:5])  # look at the first 5 features
print(dim(test$data))
head(train$label)
model <- xgboost(data=train$data, label=train$label,
nrounds=2, objective='binary:logistic')
pred <- predict(model, test$data)
pred <- ifelse(pred>0.5, 1, 0)
table(pred, test$label)
cv.res <- xgb.cv(data=train$data, label=train$label,
nfold=5, nrounds=2, objective='binary:logistic')
xgb.plot.tree(feature_names = agaricus.train$data@Dimnames[[2]], model=model)
install.packages("DiagrammeR")
require(xgboost)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
print(train$data[1, 1:5])  # look at the first 5 features
print(dim(test$data))
head(train$label)
model <- xgboost(data=train$data, label=train$label,
nrounds=2, objective='binary:logistic')
pred <- predict(model, test$data)
pred <- ifelse(pred>0.5, 1, 0)
table(pred, test$label)
cv.res <- xgb.cv(data=train$data, label=train$label,
nfold=5, nrounds=2, objective='binary:logistic')
xgb.plot.tree(feature_names = agaricus.train$data@Dimnames[[2]], model=model)
install.packages("DiagrammeR")
require(xgboost)
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
print(train$data[1, 1:5])  # look at the first 5 features
print(dim(test$data))
head(train$label)
model <- xgboost(data=train$data, label=train$label,
nrounds=2, objective='binary:logistic')
pred <- predict(model, test$data)
pred <- ifelse(pred>0.5, 1, 0)
table(pred, test$label)
cv.res <- xgb.cv(data=train$data, label=train$label,
nfold=5, nrounds=2, objective='binary:logistic')
xgb.plot.tree(feature_names = agaricus.train$data@Dimnames[[2]], model=model)
bst <- xgboost(data = train$data, label = train$label, max.depth = 15,
eta = 1, nthread = 2, nround = 30, objective = "binary:logistic",
min_child_weight = 50)
xgb.plot.multi.trees(model = bst, feature_names = agaricus.train$data@Dimnames[[2]], features.keep = 3)
bst <- xgboost(data = train$data, label = train$label, max.depth = 2,
eta = 1, nthread = 2, nround = 2,objective = "binary:logistic")
importance_matrix <- xgb.importance(agaricus.train$data@Dimnames[[2]], model = bst)
xgb.plot.importance(importance_matrix)
bst <- xgboost(data = train$data, label = train$label, max.depth = 15,
eta = 1, nthread = 2, nround = 30, objective = "binary:logistic",
min_child_weight = 50)
xgb.plot.deepness(model = bst)
install.packages("tidyverse")
library(tidyverse)
unlink("Regression_cache", recursive = TRUE)
win_stats_df <- read.csv((unz("League_Data/league_korea_high_elo_team_stats.zip", "win_team_stats.csv")))
lose_stats_df <- read.csv((unz("League_Data/league_korea_high_elo_team_stats.zip", "lose_team_stats.csv")))
str(win_stats_df)
str(lose_stats_df)
# Replacing column names for rbind
colnames(win_stats_df) <- c('kill1', 'kill2', 'kill3', 'kill4', 'kill5', 'death1', 'death2', 'death3', 'death4', 'death5', 'totalDamageDealtToChampions1', 'totalDamageDealtToChampions2', 'totalDamageDealtToChampions3', 'totalDamageDealtToChampions4', 'totalDamageDealtToChampions5', 'goldEarned1', 'goldEarned2', 'goldEarned3', 'goldEarned4', 'goldEarned5', 'visionScore1', 'visionScore2', 'visionScore3', 'visionScore4', 'visionScore5', 'totalTimeCrowdControlDealt1', 'totalTimeCrowdControlDealt2', 'totalTimeCrowdControlDealt3', 'totalTimeCrowdControlDealt4', 'totalTimeCrowdControlDealt5', 'gameId')
colnames(lose_stats_df) <- c('kill1', 'kill2', 'kill3', 'kill4', 'kill5', 'death1', 'death2', 'death3', 'death4', 'death5', 'totalDamageDealtToChampions1', 'totalDamageDealtToChampions2', 'totalDamageDealtToChampions3', 'totalDamageDealtToChampions4', 'totalDamageDealtToChampions5', 'goldEarned1', 'goldEarned2', 'goldEarned3', 'goldEarned4', 'goldEarned5', 'visionScore1', 'visionScore2', 'visionScore3', 'visionScore4', 'visionScore5', 'totalTimeCrowdControlDealt1', 'totalTimeCrowdControlDealt2', 'totalTimeCrowdControlDealt3', 'totalTimeCrowdControlDealt4', 'totalTimeCrowdControlDealt5', 'gameId')
# Adding column based on dataset it is in
library(dplyr)
win_stats_df <- win_stats_df %>%
mutate(won=1)
lose_stats_df <- lose_stats_df %>%
mutate(won =0)
#full_stats_df <- merge(win_stats_df, lose_stats_df, by = "gameId")
full_stats_df <- rbind(win_stats_df, lose_stats_df)
drop <- c("gameId")
full_stats_df <- full_stats_df[,!(names(full_stats_df) %in% drop)]
# Make our won column a factor for classification
full_stats_df$won <- as.factor(full_stats_df$won)
str(full_stats_df)
i <- sample(1:nrow(full_stats_df), .2*nrow(full_stats_df), replace=FALSE)
full_stats_smol <- full_stats_df[i,]
lolDataless <- full_stats_smol %>% rowwise() %>% mutate(TotalKill = sum(c_across(kill1:kill5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalDeath = sum(c_across(death1:death5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalDamage = sum(c_across(totalDamageDealtToChampions1:totalDamageDealtToChampions5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalGold = sum(c_across(goldEarned1:goldEarned5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalVision = sum(c_across(visionScore1:visionScore5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalCrowdControl = sum(c_across(totalTimeCrowdControlDealt1:totalTimeCrowdControlDealt5)))
drop <- c('kill1', 'kill2', 'kill3', 'kill4', 'kill5', 'death1', 'death2', 'death3', 'death4', 'death5', 'totalDamageDealtToChampions1', 'totalDamageDealtToChampions2', 'totalDamageDealtToChampions3', 'totalDamageDealtToChampions4', 'totalDamageDealtToChampions5', 'goldEarned1', 'goldEarned2', 'goldEarned3', 'goldEarned4', 'goldEarned5', 'visionScore1', 'visionScore2', 'visionScore3', 'visionScore4', 'visionScore5', 'totalTimeCrowdControlDealt1', 'totalTimeCrowdControlDealt2', 'totalTimeCrowdControlDealt3', 'totalTimeCrowdControlDealt4', 'totalTimeCrowdControlDealt5')
lolDataless = lolDataless[, !(names(lolDataless) %in% drop)]
summary(lolDataless)
set.seed(1010)
i <- sample(1:nrow(lolDataless), 0.75*nrow(lolDataless), replace=FALSE)
full_stats_train <- lolDataless[i,]
full_stats_test <- lolDataless[-i,]
summary(full_stats_train)
boxplot(full_stats_train$won, full_stats_train$TotalDeath, main="Won and Deaths", xlab="Won", ylab="Total Deaths", outline = FALSE, col = 'aquamarine')
boxplot(full_stats_train$won, full_stats_train$TotalKill, main="Won and kills", xlab="Won", ylab="Total kills", outline = FALSE, col = 'azure')
boxplot(full_stats_train$won, full_stats_train$TotalGold, main="Won and Gold Earned", xlab="Won", ylab="Total Gold Earned", outline = FALSE, col = 'beige')
boxplot(full_stats_train$won, full_stats_train$TotalVision, main="Won and Vision Score", xlab="Won", ylab="Total Vision Score", outline = FALSE, col = 'bisque')
boxplot(full_stats_train$won, full_stats_train$TotalCrowdControl, main="Won and totalTimeCrowdControlDealt", xlab="Won", ylab="Total totalTimeCrowdControlDealt", outline = FALSE, col='red')
plot(full_stats_train$TotalKill, full_stats_train$TotalGold, main="Kills and Gold Earned", xlab="Kills", ylab="Total Gold Earned", col = rep(1:6))
plot(full_stats_train$TotalDeath, full_stats_train$TotalDeath, main="Deaths and Gold Earned", xlab="Deaths", ylab="Total Gold Earned", col = rep(6:12))
plot(full_stats_train$TotalVision, full_stats_train$TotalGold, main="Vision Score and Gold Earned", xlab="Vision Score", ylab="Total Gold Earned", col = rep(12:18))
plot(full_stats_train$TotalCrowdControl, full_stats_train$TotalGold, main="totalTimeCrowdControlDealt and Gold Earned", xlab="totalTimeCrowdControlDealt", ylab="Total Gold Earned", col = rep(18:24))
library(tree)
stats_tree <- tree(won~., data = full_stats_df)
stats_tree
summary(stats_tree)
plot(stats_tree)
text(stats_tree, cex = .75, pretty = 0)
set.seed(1010)
i <- sample(181000, 45250, replace=FALSE)
tree_train <- full_stats_df[i,]
tree_test <- full_stats_df[-i,]
stats_train_tree <- tree(as.factor(won)~., data = tree_train)
print(stats_train_tree)
tree_pred <- predict(stats_train_tree, newdata = tree_test, type = "class")
library(caret)
confusionMatrix(as.factor(tree_pred), reference = as.factor(tree_test$won))
cv_stats_tree <- cv.tree(stats_tree)
plot(cv_stats_tree$size, cv_stats_tree$dev, type='b')
tree_pruned <- prune.tree(stats_train_tree, best=5)
summary(tree_pruned)
plot(tree_pruned)
text(tree_pruned, cex = .75, pretty = 0)
tree_pred <- predict(stats_train_tree, newdata = tree_test, type = "class")
confusionMatrix(as.factor(tree_pred), reference = as.factor(tree_test$won))
library(randomForest)
set.seed(1010)
rand_for <- randomForest(won~., data=full_stats_train, importance=TRUE)
rand_for
library(caret)
pred_rand_for <- predict(rand_for, newdata=full_stats_test)
confusionMatrix(as.factor(pred_rand_for), reference = as.factor(full_stats_test$won))
library(randomForest)
set.seed(1010)
rand_for_bag <- randomForest(won~., data=full_stats_train, mtry = 6)
rand_for_bag
library(caret)
pred_rand_for_bag <- predict(rand_for_bag, newdata=full_stats_test)
confusionMatrix(as.factor(pred_rand_for_bag), reference = as.factor(full_stats_test$won))
library(xgboost)
train_label <- ifelse(full_stats_train$won==1, 1, 0)
train_matrix <- data.matrix((full_stats_train[, -1]))
xgb_model <- xgboost(data=train_matrix, label=train_label, nthread = 4, nrounds=100, objective='binary:logistic')
test_label <- ifelse(full_stats_test$won==1, 1, 0)
test_matrix <- data.matrix((full_stats_test[, -1]))
xgb_probs <- predict(xgb_model, test_matrix)
xgb_pred <- ifelse(xgb_probs>.5, 1, 0)
confusionMatrix(as.factor(xgb_pred), as.factor(full_stats_test$won))
cv.res <- xgb.cv(data=train_matrix, label=train_label, nfold=5, nrounds=100, objective='binary:logistic')
library(xgboost)
train_label <- ifelse(full_stats_train$won==1, 1, 0)
train_matrix <- data.matrix((full_stats_train[, -1]))
xgb_cmb_model <- xgboost(data=train_matrix, label=train_label, max.depth = 3, eta = 1, nthread = 4, nrounds=100, objective='binary:logistic', min_child_weight=50)
test_label <- ifelse(full_stats_test$won==1, 1, 0)
test_matrix <- data.matrix((full_stats_test[, -1]))
xgb_cmb_probs <- predict(xgb_cmb_model, test_matrix)
xgb_cmb_pred <- ifelse(xgb_cmb_probs>.5, 1, 0)
confusionMatrix(as.factor(xgb_cmb_pred), as.factor(full_stats_test$won))
cv.res <- xgb.cv(data=train_matrix, label=train_label, nfold=5, nrounds=100, objective='binary:logistic')
xgb.plot.multi.trees(model = xgb_cmb_model, feature_names = colnames(train_matrix), features_keep = 6)
install.packages("DiagrammeR")
xgb.plot.multi.trees(model = xgb_cmb_model, feature_names = colnames(train_matrix), features_k eep = 6)
cv.res <- xgb.cv(data=train_matrix, label=train_label, nfold=5, nrounds=100, objective='binary:logistic')
win_stats_df <- read.csv((unz("League_Data/league_korea_high_elo_team_stats.zip", "win_team_stats.csv")))
lose_stats_df <- read.csv((unz("League_Data/league_korea_high_elo_team_stats.zip", "lose_team_stats.csv")))
str(win_stats_df)
str(lose_stats_df)
# Replacing column names for rbind
colnames(win_stats_df) <- c('kill1', 'kill2', 'kill3', 'kill4', 'kill5', 'death1', 'death2', 'death3', 'death4', 'death5', 'totalDamageDealtToChampions1', 'totalDamageDealtToChampions2', 'totalDamageDealtToChampions3', 'totalDamageDealtToChampions4', 'totalDamageDealtToChampions5', 'goldEarned1', 'goldEarned2', 'goldEarned3', 'goldEarned4', 'goldEarned5', 'visionScore1', 'visionScore2', 'visionScore3', 'visionScore4', 'visionScore5', 'totalTimeCrowdControlDealt1', 'totalTimeCrowdControlDealt2', 'totalTimeCrowdControlDealt3', 'totalTimeCrowdControlDealt4', 'totalTimeCrowdControlDealt5', 'gameId')
colnames(lose_stats_df) <- c('kill1', 'kill2', 'kill3', 'kill4', 'kill5', 'death1', 'death2', 'death3', 'death4', 'death5', 'totalDamageDealtToChampions1', 'totalDamageDealtToChampions2', 'totalDamageDealtToChampions3', 'totalDamageDealtToChampions4', 'totalDamageDealtToChampions5', 'goldEarned1', 'goldEarned2', 'goldEarned3', 'goldEarned4', 'goldEarned5', 'visionScore1', 'visionScore2', 'visionScore3', 'visionScore4', 'visionScore5', 'totalTimeCrowdControlDealt1', 'totalTimeCrowdControlDealt2', 'totalTimeCrowdControlDealt3', 'totalTimeCrowdControlDealt4', 'totalTimeCrowdControlDealt5', 'gameId')
# Adding column based on dataset it is in
library(dplyr)
win_stats_df <- win_stats_df %>%
mutate(won=1)
lose_stats_df <- lose_stats_df %>%
mutate(won =0)
#full_stats_df <- merge(win_stats_df, lose_stats_df, by = "gameId")
full_stats_df <- rbind(win_stats_df, lose_stats_df)
drop <- c("gameId")
full_stats_df <- full_stats_df[,!(names(full_stats_df) %in% drop)]
# Make our won column a factor for classification
full_stats_df$won <- as.factor(full_stats_df$won)
str(full_stats_df)
i <- sample(1:nrow(full_stats_df), .2*nrow(full_stats_df), replace=FALSE)
full_stats_smol <- full_stats_df[i,]
lolDataless <- full_stats_smol %>% rowwise() %>% mutate(TotalKill = sum(c_across(kill1:kill5)))
win_stats_df <- read.csv((unz("League_Data/league_korea_high_elo_team_stats.zip", "win_team_stats.csv")))
lose_stats_df <- read.csv((unz("League_Data/league_korea_high_elo_team_stats.zip", "lose_team_stats.csv")))
str(win_stats_df)
str(lose_stats_df)
# Replacing column names for rbind
colnames(win_stats_df) <- c('kill1', 'kill2', 'kill3', 'kill4', 'kill5', 'death1', 'death2', 'death3', 'death4', 'death5', 'totalDamageDealtToChampions1', 'totalDamageDealtToChampions2', 'totalDamageDealtToChampions3', 'totalDamageDealtToChampions4', 'totalDamageDealtToChampions5', 'goldEarned1', 'goldEarned2', 'goldEarned3', 'goldEarned4', 'goldEarned5', 'visionScore1', 'visionScore2', 'visionScore3', 'visionScore4', 'visionScore5', 'totalTimeCrowdControlDealt1', 'totalTimeCrowdControlDealt2', 'totalTimeCrowdControlDealt3', 'totalTimeCrowdControlDealt4', 'totalTimeCrowdControlDealt5', 'gameId')
colnames(lose_stats_df) <- c('kill1', 'kill2', 'kill3', 'kill4', 'kill5', 'death1', 'death2', 'death3', 'death4', 'death5', 'totalDamageDealtToChampions1', 'totalDamageDealtToChampions2', 'totalDamageDealtToChampions3', 'totalDamageDealtToChampions4', 'totalDamageDealtToChampions5', 'goldEarned1', 'goldEarned2', 'goldEarned3', 'goldEarned4', 'goldEarned5', 'visionScore1', 'visionScore2', 'visionScore3', 'visionScore4', 'visionScore5', 'totalTimeCrowdControlDealt1', 'totalTimeCrowdControlDealt2', 'totalTimeCrowdControlDealt3', 'totalTimeCrowdControlDealt4', 'totalTimeCrowdControlDealt5', 'gameId')
# Adding column based on dataset it is in
library(dplyr)
win_stats_df <- win_stats_df %>%
mutate(won=1)
lose_stats_df <- lose_stats_df %>%
mutate(won =0)
#full_stats_df <- merge(win_stats_df, lose_stats_df, by = "gameId")
full_stats_df <- rbind(win_stats_df, lose_stats_df)
drop <- c("gameId")
full_stats_df <- full_stats_df[,!(names(full_stats_df) %in% drop)]
# Make our won column a factor for classification
full_stats_df$won <- as.factor(full_stats_df$won)
str(full_stats_df)
i <- sample(1:nrow(full_stats_df), .2*nrow(full_stats_df), replace=FALSE)
full_stats_smol <- full_stats_df[i,]
lolDataless <- full_stats_smol %>% rowwise() %>% mutate(TotalKill = sum(c_across(kill1:kill5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalDeath = sum(c_across(death1:death5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalDamage = sum(c_across(totalDamageDealtToChampions1:totalDamageDealtToChampions5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalGold = sum(c_across(goldEarned1:goldEarned5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalVision = sum(c_across(visionScore1:visionScore5)))
lolDataless <- lolDataless %>% rowwise() %>% mutate(TotalCrowdControl = sum(c_across(totalTimeCrowdControlDealt1:totalTimeCrowdControlDealt5)))
drop <- c('kill1', 'kill2', 'kill3', 'kill4', 'kill5', 'death1', 'death2', 'death3', 'death4', 'death5', 'totalDamageDealtToChampions1', 'totalDamageDealtToChampions2', 'totalDamageDealtToChampions3', 'totalDamageDealtToChampions4', 'totalDamageDealtToChampions5', 'goldEarned1', 'goldEarned2', 'goldEarned3', 'goldEarned4', 'goldEarned5', 'visionScore1', 'visionScore2', 'visionScore3', 'visionScore4', 'visionScore5', 'totalTimeCrowdControlDealt1', 'totalTimeCrowdControlDealt2', 'totalTimeCrowdControlDealt3', 'totalTimeCrowdControlDealt4', 'totalTimeCrowdControlDealt5')
lolDataless = lolDataless[, !(names(lolDataless) %in% drop)]
summary(lolDataless)
set.seed(1010)
i <- sample(1:nrow(lolDataless), 0.75*nrow(lolDataless), replace=FALSE)
full_stats_train <- lolDataless[i,]
full_stats_test <- lolDataless[-i,]
summary(full_stats_train)
boxplot(full_stats_train$won, full_stats_train$TotalDeath, main="Won and Deaths", xlab="Won", ylab="Total Deaths", outline = FALSE, col = 'aquamarine')
boxplot(full_stats_train$won, full_stats_train$TotalKill, main="Won and kills", xlab="Won", ylab="Total kills", outline = FALSE, col = 'azure')
boxplot(full_stats_train$won, full_stats_train$TotalGold, main="Won and Gold Earned", xlab="Won", ylab="Total Gold Earned", outline = FALSE, col = 'beige')
boxplot(full_stats_train$won, full_stats_train$TotalVision, main="Won and Vision Score", xlab="Won", ylab="Total Vision Score", outline = FALSE, col = 'bisque')
boxplot(full_stats_train$won, full_stats_train$TotalCrowdControl, main="Won and totalTimeCrowdControlDealt", xlab="Won", ylab="Total totalTimeCrowdControlDealt", outline = FALSE, col='red')
plot(full_stats_train$TotalKill, full_stats_train$TotalGold, main="Kills and Gold Earned", xlab="Kills", ylab="Total Gold Earned", col = rep(1:6))
plot(full_stats_train$TotalDeath, full_stats_train$TotalDeath, main="Deaths and Gold Earned", xlab="Deaths", ylab="Total Gold Earned", col = rep(6:12))
plot(full_stats_train$TotalVision, full_stats_train$TotalGold, main="Vision Score and Gold Earned", xlab="Vision Score", ylab="Total Gold Earned", col = rep(12:18))
plot(full_stats_train$TotalCrowdControl, full_stats_train$TotalGold, main="totalTimeCrowdControlDealt and Gold Earned", xlab="totalTimeCrowdControlDealt", ylab="Total Gold Earned", col = rep(18:24))
library(tree)
stats_tree <- tree(won~., data = full_stats_df)
stats_tree
summary(stats_tree)
plot(stats_tree)
text(stats_tree, cex = .75, pretty = 0)
set.seed(1010)
i <- sample(181000, 45250, replace=FALSE)
tree_train <- full_stats_df[i,]
tree_test <- full_stats_df[-i,]
stats_train_tree <- tree(as.factor(won)~., data = tree_train)
print(stats_train_tree)
tree_pred <- predict(stats_train_tree, newdata = tree_test, type = "class")
library(caret)
confusionMatrix(as.factor(tree_pred), reference = as.factor(tree_test$won))
cv_stats_tree <- cv.tree(stats_tree)
plot(cv_stats_tree$size, cv_stats_tree$dev, type='b')
tree_pruned <- prune.tree(stats_train_tree, best=5)
summary(tree_pruned)
plot(tree_pruned)
text(tree_pruned, cex = .75, pretty = 0)
tree_pred <- predict(stats_train_tree, newdata = tree_test, type = "class")
confusionMatrix(as.factor(tree_pred), reference = as.factor(tree_test$won))
library(randomForest)
set.seed(1010)
rand_for <- randomForest(won~., data=full_stats_train, importance=TRUE)
rand_for
library(caret)
pred_rand_for <- predict(rand_for, newdata=full_stats_test)
confusionMatrix(as.factor(pred_rand_for), reference = as.factor(full_stats_test$won))
library(randomForest)
set.seed(1010)
rand_for_bag <- randomForest(won~., data=full_stats_train, mtry = 6)
rand_for_bag
library(caret)
pred_rand_for_bag <- predict(rand_for_bag, newdata=full_stats_test)
confusionMatrix(as.factor(pred_rand_for_bag), reference = as.factor(full_stats_test$won))
library(xgboost)
train_label <- ifelse(full_stats_train$won==1, 1, 0)
train_matrix <- data.matrix((full_stats_train[, -1]))
xgb_model <- xgboost(data=train_matrix, label=train_label, nthread = 4, nrounds=100, objective='binary:logistic')
test_label <- ifelse(full_stats_test$won==1, 1, 0)
test_matrix <- data.matrix((full_stats_test[, -1]))
xgb_probs <- predict(xgb_model, test_matrix)
xgb_pred <- ifelse(xgb_probs>.5, 1, 0)
confusionMatrix(as.factor(xgb_pred), as.factor(full_stats_test$won))
cv.res <- xgb.cv(data=train_matrix, label=train_label, nfold=5, nrounds=100, objective='binary:logistic')
library(xgboost)
train_label <- ifelse(full_stats_train$won==1, 1, 0)
train_matrix <- data.matrix((full_stats_train[, -1]))
xgb_cmb_model <- xgboost(data=train_matrix, label=train_label, max.depth = 3, eta = 1, nthread = 4, nrounds=100, objective='binary:logistic', min_child_weight=50)
test_label <- ifelse(full_stats_test$won==1, 1, 0)
test_matrix <- data.matrix((full_stats_test[, -1]))
xgb_cmb_probs <- predict(xgb_cmb_model, test_matrix)
xgb_cmb_pred <- ifelse(xgb_cmb_probs>.5, 1, 0)
confusionMatrix(as.factor(xgb_cmb_pred), as.factor(full_stats_test$won))
cv.res <- xgb.cv(data=train_matrix, label=train_label, nfold=5, nrounds=100, objective='binary:logistic')
xgb.plot.multi.trees(model = xgb_cmb_model, feature_names = colnames(train_matrix), features_k eep = 6)
xgb.plot.multi.trees(model = xgb_cmb_model, feature_names = colnames(train_matrix), features_keep = 6)
library(fastAdaboost)
